import React, { Component } from "react";

import { Grid, Paper, Button, TextField, Switch, 
         FormLabel, FormControlLabel } from '@material-ui/core';

import { withStyles } from '@material-ui/core/styles';

import Progress from './ProgressBar';
import HollowButton from "./HollowButton";

import AceEditor from 'react-ace';
import 'brace/ext/language_tools';
import "ace-builds/src-noconflict/mode-golang";
import "ace-builds/src-noconflict/mode-javascript";
import "ace-builds/src-noconflict/theme-github";


const styles = theme => ({
  root: {
    flexGrow: 1,
  },
  paper: {
    marginTop: theme.spacing(1),
    padding: theme.spacing(1),
    minHeight: "300px",
  },
  button: {
    color: "white",
    backgroundColor: theme.palette.info.dark,
    marginRight: theme.spacing(1),

  }
});

class FormContainer extends Component {
  
  constructor(props) {
    super(props);

    this.state = {
      showProgress: false, 
      output: "", 
      input: "",
    };

    this.handleFormSubmit = this.handleFormSubmit.bind(this);
    this.handleClearForm = this.handleClearForm.bind(this);
    this.handleCodeChange = this.handleCodeChange.bind(this);
  }

  componentDidMount() {
  }

  handleCodeChange(newValue){
    this.state.input = newValue;
  }

  handleFormSubmit(e) {
    e.preventDefault();
    this.state.showProgress = true; 
    this.setState(this.state);
    console.log(this.state.input);
    fetch("http://localhost:8080/.netlify/functions/convert", {
        method:'POST', 
        mode:'cors',
        cache:'no-cache',
        headers: {'Content-Type': 'application/json'}, 
        redirect:'follow', 
        body: this.state.input}
        ).then(response => {
          return response.json();
        }).then(result=>{
          console.log(result);
          this.state.output = result.output;
          this.state.showProgress = false;
          this.setState(this.state);
    }); 
  }

  handleClearForm(e) {
    e.preventDefault();
    this.state.output = ""
    this.state.input = "";
    this.setState(this.state);
  }

  render() {
    const { classes } = this.props;
    return (
      <div id="root">
      <form className="container-fluid" onSubmit={this.handleFormSubmit}>
        <div>
            <Grid container spacing={1}>
              <Grid item xs={2}>
                <Paper className={classes.paper}>
                  <FormControlLabel
                    value="extJSON"
                    control={<Switch color="primary"/>}
                    label="ExtJSON"
                    labelPlacement="start"
                  />
                  <br/><br/><br/>
                  <TextField
                    id="filled-topname"
                    label="Top Name"
                    defaultValue="AutoGenerated"
                    variant="outlined"
                  />
                  <br/><br/><br/>
                  <div id="progress">
                    { this.state.showProgress ? <Progress/> : null}
                  </div>    
                  <br/>
                  <Button variant="contained" 
                          onClick={this.handleFormSubmit}
                          className={classes.button}
                  >
                  Convert
                  </Button>
                  <HollowButton
                    onClick={this.handleClearForm}
                    title={"Clear"}
                  />{" "}
                </Paper>    
              </Grid>

              <Grid item xs>
                <FormLabel>Input:</FormLabel>
                <AceEditor
                  mode="javascript"
                  theme="github"
                  name="input-code"
                  placeholder="{ 'example' : 'test' }"
                  onChange={this.handleCodeChange}
                  wrapEnabled={true}
                  width={ "100%" }
                  showPrintMargin={false}
                  showGutter={true}
                  highlightActiveLine={true}
                  value={this.state.input}
                  setOptions={{showLineNumbers: false, 
                              tabSize: 2, 
                              enableLiveAutocompletion: false, 
                              useWorker: false, 
                              behavioursEnabled: false}}
                />
              </Grid>
              <Grid item xs>
                <FormLabel>Output:</FormLabel>
                <AceEditor
                  mode="golang"
                  theme="github"
                  name="output-code"
                  onChange={this.handleCodeChange}
                  wrapEnabled={true}
                  width={ "100%" }
                  showPrintMargin={false}
                  showGutter={true}
                  highlightActiveLine={true}
                  value={this.state.output}
                  setOptions={{showLineNumbers: true, 
                              tabSize: 2, 
                              enableLiveAutocompletion: false, 
                              useWorker: false, 
                              readOnly: true,
                              behavioursEnabled: false}}
                />
              </Grid>
            </Grid>
        </div>
      </form>
      </div>
    );
  }
}

export default withStyles(styles)(FormContainer);
